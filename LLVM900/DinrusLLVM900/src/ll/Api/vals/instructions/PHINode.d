module ll.api.vals.instructions.PHINode;

   import ll.api.vals.Instruction;
   import ll.api.vals.BasicBlock;
   import ll.api.Value;
   import ll.c.Core, ll.c.Types;

    public class УзелПХИ : Инструкция
    {
		private ЛЛЗначение экзэмпл;

        this(ЛЛЗначение экзэмпл)
		{
            super(экзэмпл);
            this.экзэмпл = экзэмпл;
        }

        public ЛЛЗначение раскрой()
		{
            return this.экзэмпл;
		}

        public БазБлок[] входящиеБлоки()
        {

                БазБлок[] блоки;
                for(бцел i = 0; i < члоВходящих; i++)
                {
                    блоки[i] = дайВходящийБлок(i);
                }
                return блоки;
            
        }

        public Значение[] входящиеЗначения()
        {

                Значение[] значения;
                for(бцел i = 0; i < члоВходящих; i++)
                {
                    значения[i] = дайВходящееЗначение(i);
                }
                return значения;
            
        }

        public проц добавьВходящиe(Значение[] входящЗначч, БазБлок[] входящБлокк)
        {
            ЛЛЗначение[] значения;
            ЛЛБазовыйБлок[] блоки;

            foreach(зн; входящЗначч)
			{
                значения ~= зн.раскрой();
			}

			foreach(бл; входящБлокк)
			{
                блоки ~= бл.раскрой();
			}

           // assert(блоки.length == значения.length, "Разное число входящих блоков и значений!");
            ЛЛДобавьВходящ(this.раскрой(), cast(ЛЛЗначение*)&значения, cast(ЛЛБазовыйБлок*) &блоки, блоки.length);
           // assert(блоки.length == члоВходящих(), "Число переданных и полученных блоков разное!");
        }

        
        public бцел члоВходящих()
        {
            return ЛЛПосчитайВходящ(this.раскрой()); 
        }

        public БазБлок дайВходящийБлок(бцел индекс)
        {
            return new БазБлок(ЛЛДайВходящБлок(this.раскрой(), индекс));
        }

        public Значение дайВходящееЗначение(бцел индекс)
        {
            return new Значение(ЛЛДайВходящЗнач(this.раскрой(), индекс));
        }
    }
