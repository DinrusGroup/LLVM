module ll.api.vals.consts.ConstantStruct;

import ll.c.Types, ll.c.Core;
import ll.api.vals.Constant;
import ll.api.Context;
import ll.api.Type;
import ll.api.Value;

alias КонстСтрукт[] КонстСтрукты;

    public class КонстСтрукт : Константа
    {

	// 1-й конструктор. Выполняет иницмализацию 2-го (следующего) конструктора.
        public this(Значение[] значения)
		{ 
			this(значения, нет);			
		}

	// 2-й конструктор. Используется предыдущим конструктором,
		//поэтому окончательно устанавливает значения структуры this.значения = значения;
        public this(Значение[] значения, бул упакована_ли)
		{ 
			ЛЛЗначение[] знач;
			foreach(зн;значения)
			{
				знач ~= зн.раскрой();

			}
			this(ЛЛКонстСтрукт(cast(ЛЛЗначение*) &знач, знач.length, упакована_ли));
			this.значения = значения;
		}
//3-й конструктор. Выполняет иницмализацию 4-го (следующего) конструктора.
        public this(Контекст контекст, Значение[] значения)
		{ 
			this(контекст, значения, нет);
		}
//4-й конструктор.Используется предыдущим конструктором, 
		//поэтому окончательно устанавливает значения структуры this.значения = значения;
        public this(Контекст контекст, Значение[] значения, бул упакована_ли)
		{
			ЛЛЗначение[] знач;
			foreach(зн;значения)
			{
				знач ~= зн.раскрой();

			}
			this(ЛЛКонстСтруктВКонтексте(контекст.раскрой(), cast(ЛЛЗначение*) &знач,знач.length, упакована_ли));
			this.значения = значения;
		}

//5-й конструктор.Устанавливает "this.значения = значения;" не как Значения, а как Константы;
		//Поэтому this.значения возникает необходимость сделать союзом, содержащим разные 
		// типовые варианты (или ВАРИАНТ?!).
        public this(Тип типСтрукт, Константа[] значения)
		{ 
			ЛЛЗначение[] знач;
			foreach(зн; значения)
			{
				знач ~= зн.раскрой();
			}

			this(ЛЛИменованнаяКонстСтрукт(типСтрукт.раскрой(),cast(ЛЛЗначение*)&знач, знач.length));
			this.константы = значения;
		}

			public this(ЛЛЗначение экзэмпл)
			{
            super(экзэмпл);   
				this.экземпл = экзэмпл;
            }

			public override ЛЛЗначение раскрой()
			{
				return this.экземпл;
			}
private:

			ЛЛЗначение экземпл;
			Значения значения;
			Константы константы;
			

	
    }
