module ll.api.typs.FunctionType;

import ll.api.Type;
import ll.c.Types;
import ll.c.Core;
import ll.common;

alias Тип ТипВозврата;

    public class ТипФункция : Тип
    {
        public this(Тип типВозврат)
		{
			this(типВозврат, нет);
		}

        public this(Тип типВозврат, бул варАрг_ли)
		{
			this(типВозврат, пусто, варАрг_ли);
		}

        public this(Тип типВозврат, Тип[] типыПарамов)
		{
			this(типВозврат, типыПарамов, нет);
		}

        public this(Тип типВозврат, Тип[] типыПарамов, бул варАрг_ли)
		{ 
			ЛЛТип[] парамТипы;
			foreach(Тип элт; типыПарамов)
			{
				парамТипы ~= элт.раскрой();				
			}
			this(ЛЛТипФункция(типВозврат.раскрой(), cast(ЛЛТип*)&парамТипы, парамТипы.length, варАрг_ли ? 1 : 0));
		}

		private ЛЛТип экзэмпл;

        this(ЛЛТип экзэмпл)
		{
            super(экзэмпл);
			this.экзэмпл = экзэмпл;
			
        }

        public override ЛЛТип раскрой()
		{
            return this.экзэмпл;
		}
/+
        public override ткст вТкст()
		{
			//needs formating!
			//return фм("{} ({string.Join!(Тип)(", ", типыПарам)})", типВозврата );
		}
+/
        public override бул типПервКласса_ли()
		{
			return нет;
		}

        public ТипВозврата типВозврата()
		{
			return new Тип(ЛЛДайТипВозврата(this.раскрой()));
		}

        public бцел члоПарамов()
		{
			return ЛЛСчётТиповПарам(this.раскрой());
		}

        public Тип дайТипПарама(бцел индекс)
		{
			ЛЛТип[] парамТипы;

			ЛЛДайТипыПарам(this.раскрой(), cast(ЛЛТип*) &парамТипы);
			return new Тип(парамТипы[индекс]);
		}

        public Тип[] типыПарам()
		{
			Тип[] рез;
			ЛЛТип[] птипы;
			foreach(пт; птипы)
			{
				рез ~= new Тип(пт);
			}

			ЛЛДайТипыПарам(this.раскрой(), cast(ЛЛТип*) &птипы);
			return рез;
		}

        public бул варАрг_ли ()
		{
			return ЛЛВараргФункц_ли(this.раскрой());
		}
    }
